/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/audio.js":
/*!**********************!*\
  !*** ./src/audio.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyserNode: () => (/* binding */ analyserNode),\n/* harmony export */   audioCtx: () => (/* binding */ audioCtx),\n/* harmony export */   loadSoundFile: () => (/* binding */ loadSoundFile),\n/* harmony export */   pauseCurrentSound: () => (/* binding */ pauseCurrentSound),\n/* harmony export */   playCurrentSound: () => (/* binding */ playCurrentSound),\n/* harmony export */   setVolume: () => (/* binding */ setVolume),\n/* harmony export */   setupWebaudio: () => (/* binding */ setupWebaudio)\n/* harmony export */ });\n// 1 - our WebAudio context, **we will export and make this public at the bottom of the file**\r\nlet audioCtx;\r\n\r\n// **These are \"private\" properties - these will NOT be visible outside of this module (i.e. file)**\r\n// 2 - WebAudio nodes that are part of our WebAudio audio routing graph\r\nlet element, sourceNode, analyserNode, gainNode;\r\n\r\n// 3 - here we are faking an enumeration\r\nconst DEFAULTS = Object.freeze({\r\n    gain        :   .5,\r\n    numSamples  :   256\r\n});\r\n\r\n// 4 - create a new array of 8-bit integers (0-255)\r\n// this is a typed array to hold the audio frequency data\r\nlet audioData = new Uint8Array(DEFAULTS.numSamples/2);\r\n\r\n// **Next are \"public\" methods - we are going to export all of these at the bottom of this file**\r\nconst setupWebaudio = (filePath) =>{\r\n    // 1 - The || is because WebAudio has not been standardized across browsers yet\r\n    const AudioContext = window.AudioContext || window.webkitAudioContext;\r\n    audioCtx = new AudioContext();\r\n\r\n    // 2 - this creates an <audio> element\r\n    element = new Audio(); //document.querySelector(\"audio\");\r\n\r\n    // 3 - have it point at a sound file\r\n    loadSoundFile(filePath);\r\n\r\n    // 4 - create an a source node that points at the <audio> element\r\n    sourceNode = audioCtx.createMediaElementSource(element);\r\n\r\n    // 5 - create an analyser node\r\n    analyserNode = audioCtx.createAnalyser(); // note the UK spelling of \"Analyser\"\r\n    \r\n    /*\r\n    // 6\r\n    We will request DEFAULTS.numSamples number of samples or \"bins\" spaced equally \r\n    across the sound spectrum.\r\n\r\n    If DEFAULTS.numSamples (fftSize) is 256, then the first bin is 0 Hz, the second is 172 Hz, \r\n    the third is 344Hz, and so on. Each bin contains a number between 0-255 representing \r\n    the amplitude of that frequency.\r\n    */ \r\n\r\n    // fft stands for Fast Fourier Transform\r\n    analyserNode.fftSize = DEFAULTS.numSamples;\r\n\r\n    // 7 - create a gain (volume) node\r\n    gainNode = audioCtx.createGain();\r\n    gainNode.gain.value = DEFAULTS.gain;\r\n\r\n    // 8 - connect the nodes - we now have an audio graph\r\n    sourceNode.connect(analyserNode);\r\n    analyserNode.connect(gainNode);\r\n    gainNode.connect(audioCtx.destination);\r\n}\r\n\r\nconst loadSoundFile = (filePath) =>{\r\n    element.src = filePath;\r\n}\r\n\r\nconst playCurrentSound = () =>{\r\n    element.play();\r\n}\r\n\r\nconst pauseCurrentSound = () =>{\r\n    element.pause();\r\n}\r\n\r\nconst setVolume = (value) =>{\r\n    value = Number(value); // make sure that it's a Number rather than a String\r\n    gainNode.gain.value = value;\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://myat-n-hw3-refactor/./src/audio.js?");

/***/ }),

/***/ "./src/canvas.js":
/*!***********************!*\
  !*** ./src/canvas.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Coin: () => (/* binding */ Coin),\n/* harmony export */   ctx: () => (/* binding */ ctx),\n/* harmony export */   draw: () => (/* binding */ draw),\n/* harmony export */   setupCanvas: () => (/* binding */ setupCanvas)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./main.js */ \"./src/main.js\");\n/*\r\n\tThe purpose of this file is to take in the analyser node and a <canvas> element: \r\n\t  - the module will create a drawing context that points at the <canvas> \r\n\t  - it will store the reference to the analyser node\r\n\t  - in draw(), it will loop through the data in the analyser node\r\n\t  - and then draw something representative on the canvas\r\n\t  - maybe a better name for this file/module would be *visualizer.js* ?\r\n*/\r\n\r\n\r\n\r\nlet ctx,canvasWidth,canvasHeight,gradient,analyserNode,audioData;\r\nlet angle = 0;\r\nlet rotateSpeed = 1;\r\nconst setupCanvas = (canvasElement,analyserNodeRef) =>{\r\n\t// create drawing context\r\n\tctx = canvasElement.getContext(\"2d\");\r\n\tcanvasWidth = canvasElement.width;\r\n\tcanvasHeight = canvasElement.height;\r\n\t// create a gradient that runs top to bottom\r\n\tgradient = _utils_js__WEBPACK_IMPORTED_MODULE_0__.getLinearGradient(ctx,0,0,0,canvasHeight,[{percent:0,color:\"blue\"},{percent:.25,color:\"green\"},{percent:.5,color:\"yellow\"},{percent:.75,color:\"red\"},{percent:1,color:\"magenta\"}]);\r\n\t// keep a reference to the analyser node\r\n\tanalyserNode = analyserNodeRef;\r\n\t// this is the array where the analyser data will be stored\r\n\taudioData = new Uint8Array(analyserNode.fftSize/2);\r\n}\r\n\r\nconst draw = (params={}) =>{\r\n  // 1 - populate the audioData array with the frequency data from the analyserNode\r\n\t// notice these arrays are passed \"by reference\" \r\n    analyserNode.getByteFrequencyData(audioData);\r\n    // OR\r\n\t//analyserNode.getByteTimeDomainData(audioData); // waveform data\r\n\t\r\n\t// 2 - draw background\r\n\tctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = .1;\r\n    ctx.fillRect(0,0,canvasWidth,canvasHeight);\r\n    ctx.restore();\r\n    angle += rotateSpeed;\r\n    if(angle > 500) angle = 10;\r\n\t// 3 - draw gradient\r\n\tif(params.showGradient){\r\n        ctx.save();\r\n        ctx.translate(canvasWidth / 2, canvasHeight / 2);\r\n        ctx.rotate(angle);\r\n        ctx.translate(-canvasWidth / 2, -canvasHeight / 2);\r\n        ctx.fillStyle = gradient;\r\n        ctx.globalAlpha = .3;\r\n        ctx.fillRect(0,0,canvasWidth,canvasHeight);\r\n        ctx.fillStyle = `rgba(184,255,255,.98)`;\r\n        ctx.fillRect(0,0,canvasWidth,canvasHeight);\r\n        // angle+=rotateSpeed;\r\n        ctx.restore();     \r\n    }\r\n    ctx.save();\r\n    if(params.showLine){\r\n        const BAR_WIDTH = 30;\r\n        const MAX_BAR_HEIGHT = 100;\r\n        const PADDING = 4;\r\n        const MIDDLE_Y = canvasHeight/2;\r\n        ctx.translate(canvasWidth / 2, canvasHeight / 2);\r\n        ctx.rotate(angle);\r\n        ctx.translate(-canvasWidth / 2, -canvasHeight / 2);\r\n        if(!_main_js__WEBPACK_IMPORTED_MODULE_1__.play)\r\n        {\r\n        ctx.fillStyle = \"red\";\r\n        ctx.save();\r\n        ctx.translate(440, MIDDLE_Y-170);\r\n        for(let b of audioData){\r\n            let percent = b/255;\r\n            if(percent < .02) percent = .02;\r\n            ctx.translate(BAR_WIDTH, 0);\r\n            ctx.rotate(Math.PI * 2/32);\r\n            ctx.save(); //for flip\r\n            ctx.scale(1,-1);\r\n            ctx.fillStyle = `rgb(${b},${b-128},${255-b})`;\r\n            ctx.fillRect(0,0,BAR_WIDTH,MAX_BAR_HEIGHT * percent);\r\n            ctx.restore();\r\n            ctx.translate(PADDING,10); //add space between bars\r\n        }\r\n        ctx.restore();\r\n        }\r\n    \r\n        ctx.save();\r\n        ctx.strokeStyle=\"white\";\r\n        ctx.lineWidth = 3;\r\n        let x = 0;\r\n        let y = MIDDLE_Y + 200;\r\n        ctx.beginPath();\r\n        if(!_main_js__WEBPACK_IMPORTED_MODULE_1__.play)\r\n        {\r\n        ctx.moveTo(x,y);\r\n        for(let b of audioData){\r\n            //moveTo()s\r\n            ctx.lineTo(x,y-b);\r\n            x += (ctx.canvas.width/(audioData.length-10));\r\n        }\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n     }\r\n        ctx.restore();\r\n\r\n    }\r\n    ctx.restore();\r\n\t// 4 - draw bars\r\n\tif(params.showBars){\r\n        let barSpacing = 4;\r\n        let margin = 5;\r\n        let screenWidthForBars = canvasWidth - (audioData.length * barSpacing) - margin * 2;\r\n        let barWidth = screenWidthForBars / audioData.length;\r\n        let barHeight = 200;\r\n        let topSpacing = 100;\r\n\r\n        ctx.save();\r\n        ctx.fillStyle = 'rgba(255,255,255,0.50)';\r\n        ctx.strokeStyle = 'rgba(0,0,0,0.5)';\r\n        //loop through the data and draw!\r\n        for(let i=0; i<audioData.length; i++){\r\n            ctx.fillRect(margin + i * (barWidth + barSpacing),topSpacing + 256-audioData[i],barWidth,barHeight);\r\n            ctx.strokeRect(margin + i * (barWidth + barSpacing),topSpacing + 256-audioData[i],barWidth,barHeight);\r\n        }\r\n        ctx.restore();\r\n    }\r\n\t// 5 - draw circles\r\n\tif(params.showCircles){\r\n        let maxRadius = canvasHeight/4;\r\n        ctx.save();\r\n        ctx.globalAlpha = 0.5;\r\n        for(let i=0; i<audioData.length; i++){\r\n            //red-ish circles\r\n            let percent = audioData[i] / 255;\r\n            \r\n            //middle circle\r\n            let circleRadius = percent * maxRadius;\r\n            drawCircle(ctx,circleRadius,0,2,_utils_js__WEBPACK_IMPORTED_MODULE_0__.makeColor(255, 111, 111, .34 - percent/3.0),);\r\n\r\n            //purple outer circle\r\n            drawCircle(ctx,circleRadius*1.5,0,2,_utils_js__WEBPACK_IMPORTED_MODULE_0__.makeColor(184, 0, 255, .10 - percent/10.0));\r\n\r\n            //red-ish circles, smaller\r\n            drawCircle(ctx,circleRadius*0.5,0,2,_utils_js__WEBPACK_IMPORTED_MODULE_0__.makeColor(200, 200, 255, .50 - percent/5.0));\r\n\r\n            //white ring outside\r\n            drawCircle(ctx,circleRadius*2,0,2,_utils_js__WEBPACK_IMPORTED_MODULE_0__.makeColor(0,0,0,0),\"rgba(255,255,255,1)\",10);\r\n        }\r\n        ctx.restore();\r\n    }\r\n\r\n    // 6 - bitmap manipulation\r\n\t// TODO: right now. we are looping though every pixel of the canvas (320,000 of them!), \r\n\t// regardless of whether or not we are applying a pixel effect\r\n\t// At some point, refactor this code so that we are looping though the image data only if\r\n\t// it is necessary\r\n\r\n\t// A) grab all of the pixels on the canvas and put them in the `data` array\r\n\t// `imageData.data` is a `Uint8ClampedArray()` typed array that has 1.28 million elements!\r\n\t// the variable `data` below is a reference to that array \r\n\tlet imageData = ctx.getImageData(0,0,canvasWidth,canvasHeight);\r\n    let data = imageData.data;\r\n    let length = data.length;\r\n    let width = imageData.width; //not using here\r\n\t// B) Iterate through each pixel, stepping 4 elements at a time (which is the RGBA for 1 pixel)\r\n    for(let i = 0; i<length; i++){\r\n\t\t// C) randomly change every 20th pixel to red\r\n        if(params.showNoise && Math.random() < .05){\r\n\t\t\t// data[i] is the red channel\r\n\t\t\t// data[i+1] is the green channel\r\n\t\t\t// data[i+2] is the blue channel\r\n\t\t\t// data[i+3] is the alpha channel\r\n\t\t\tdata[i] = data[i+1] = data[i+2] = 0;// zero out the red and green and blue channels\r\n            data[i+1] = 200;\r\n\t\t} // end if\r\n\r\n        //invert?\r\n        if(params.showInvert){\r\n            let red = data[i], green = data[i+1], blue = data[i+2];\r\n            data[i] = 255 - red;\r\n            data[i+1] = 255 - green;\r\n            data[i+2] = 255 - blue;\r\n            //data[i+3] is the alpha, but we're leaving that alone\r\n        }\r\n        \r\n\t} // end for\r\n\r\n    if(params.showEmboss){\r\n        for(let i=0; i<length; i++){\r\n            if(i%4 == 3) continue; //skip alpha channel\r\n            data[i] = 127 + 2*data[i] -data[i+4] - data[i+width * 4];\r\n        }\r\n    }\r\n\r\n\t// D) copy image data back to canvas\r\n    ctx.putImageData(imageData, 0, 0);\r\n\r\n    ctx.save();\r\n    ctx.fillStyle = \"black\";\r\n    ctx.globalAlpha = .1;\r\n    ctx.fillRect(0,0,canvasWidth,canvasHeight);\r\n    ctx.restore();\r\n}//end draw()\r\n\r\nconst drawCircle = (ctx,radius,startAngle, endAngle, fillStyle, strokeStyle=\"red\", linewidth=0) =>{\r\n    ctx.save();\r\n    ctx.fillStyle = fillStyle;\r\n    ctx.strokeStyle = strokeStyle;\r\n    ctx.beginPath();\r\n    ctx.arc(canvasWidth/2, canvasHeight/2, radius, startAngle, endAngle * Math.PI, false);\r\n    ctx.linewidth = linewidth;\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n    ctx.restore();\r\n}\r\nclass Coin{\r\n    spritesheetURL = \"./src/coin_spritesheet.png\";\r\n    constructor(ctx, spritesheet, x, y, spriteCount){\r\n        this.ctx = ctx;\r\n        this.spritesheet = spritesheet;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.spriteCount = spriteCount;\r\n        this.frame = 0;\r\n        this.preloadImage(this.spritesheetURL);\r\n    }\r\n\r\n    drawRect()\r\n    {\r\n        ctx.globalAlpha = .3;\r\n        ctx.fillStyle = `rgba(184,255,255,.98)`;\r\n        ctx.fillRect(0,0,100,100);\r\n        console.log(\"this happedn\");\r\n    }\r\n    draw(){\r\n        //size of sprite\r\n        const frameWidth = this.spritesheet.width/this.spriteCount;\r\n        const frameHeight = this.spritesheet.height;\r\n        this.ctx.drawImage(this.spritesheet,\r\n            this.frame * this.spritesheet.width, //x of current sprite in spritesheet\r\n            0, //y\r\n            frameWidth, //width of sprite\r\n            frameHeight,\r\n            this.x, //xPos of where we want the sprite to be\r\n            this.y,\r\n            frameWidth,frameHeight);\r\n    }\r\n    update(){\r\n        setTimeout(() => this.update(), 100); // 10 FPS\r\n        //increment\r\n        this.frame = (this.frame + 1) % this.spriteCount //will reiterate the spritesheet if frame value is greater than spritecount\r\n        this.draw();\r\n    }\r\n\r\n    preloadImage(url) {\r\n        let img = new Image();\r\n        img.onload = () => {\r\n            this.spritesheet = img;\r\n            this.update();\r\n        };\r\n        img.src = url;\r\n    }\r\n    // coinSpinning = [\r\n    //     { x: 0, y: 62, w: 30, h: 30 },\r\n    //     { x: 62, y: 62, w: 30, h: 30 },\r\n    //     { x: 124, y: 62, w: 30, h: 30 },\r\n    //     { x: 186, y: 62, w: 30, h: 30 },\r\n    //     { x: 248, y: 62, w: 30, h: 30 },\r\n    //     { x: 310, y: 62, w: 30, h: 30 },\r\n    //     { x: 372, y: 62, w: 30, h: 30 },\r\n    //     { x: 434, y: 62, w: 30, h: 30 },\r\n    //     { x: 496, y: 62, w: 30, h: 30 },\r\n    //     { x: 558, y: 62, w: 30, h: 30 },\r\n    //     { x: 682, y: 62, w: 30, h: 30 },\r\n    //     { x: 744, y: 62, w: 30, h: 30 },\r\n    //     { x: 800, y: 62, w: 30, h: 30 },\r\n    // ]\r\n}\r\n\n\n//# sourceURL=webpack://myat-n-hw3-refactor/./src/canvas.js?");

/***/ }),

/***/ "./src/loader.js":
/*!***********************!*\
  !*** ./src/loader.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main.js */ \"./src/main.js\");\n\r\nwindow.onload = ()=>{\r\n\tconsole.log(\"window.onload called\");\r\n\t// 1 - do preload here - load fonts, images, additional sounds, etc...\r\n\tconst loadJsonXHR = () =>{\r\n        const url = \"data/av-data.json\";\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        xhr.onload = (e) =>{\r\n            console.log(`In onload - HTTP Status Code = ${e.target.status}`);\r\n            const string = e.target.responseText;\r\n            let json;\r\n            try{\r\n                json = JSON.parse(string);\r\n            }catch{\r\n                document.querySelector(\"#output\").innerHTML = \"Bad JSON!\";\r\n                return;\r\n            }\r\n\r\n\t\t\t//assign value to title but if json.title is not found, report it as so\r\n\t\t\tconst title = json.title = json.title ? json.title : \"No title Found\";\r\n\t\t\tconst audioFiles = json.audioFiles;\r\n\t\t\tconst audioNames = json.audioNames;\r\n\t\t\tconst description = json.description;\r\n\t\t\tconst features = json.features;\r\n\r\n\t\t\t//Title of App\r\n\t\t\tdocument.querySelector(\"#title\").innerHTML = title;\r\n\t\t\tdocument.querySelector(\"#titleName\").innerHTML = title;\r\n\r\n\t\t\t//File Names\r\n\t\t\tconst qsFile = document.querySelector(\"#select-track\");\r\n\t\t\tfor(let i = 0; i<audioFiles.length; i++){\r\n\t\t\t\tqsFile.options[i].value = audioFiles[i];\r\n\t\t\t\tqsFile.options[i].text = audioNames[i];\r\n\t\t\t}\r\n\r\n\t\t\t//Description & Features\r\n\t\t\tconst qsDescription = document.querySelector(\"#description\");\r\n\t\t\tlet html = `${description}\\n`;\r\n\r\n\t\t\thtml += `<ul>`;\r\n\t\t\tfor(let i=0; i<features.length; i++){\r\n\t\t\t\thtml += `<li>${features[i]}</li>`\r\n\t\t\t}\r\n\t\t\thtml += `</ul>`;\r\n\t\t\tconsole.log(features);\r\n\r\n\t\t\tqsDescription.innerHTML = html;\r\n        };\r\n\r\n        xhr.onerror = e => console.log(`In onerror - HTTP Status Code = ${e.target.status}`);\r\n        xhr.open(\"GET\", url);\r\n        xhr.send();\r\n\t}\r\n\tloadJsonXHR();\r\n\r\n\t// 2 - start up app\r\n\t_main_js__WEBPACK_IMPORTED_MODULE_0__.init();\r\n}\n\n//# sourceURL=webpack://myat-n-hw3-refactor/./src/loader.js?");

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   init: () => (/* binding */ init),\n/* harmony export */   play: () => (/* binding */ play)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./src/utils.js\");\n/* harmony import */ var _audio_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./audio.js */ \"./src/audio.js\");\n/* harmony import */ var _canvas_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./canvas.js */ \"./src/canvas.js\");\n/*\r\n\tmain.js is primarily responsible for hooking up the UI to the rest of the application \r\n\tand setting up the main event loop\r\n*/\r\n\r\n\r\n\r\n\r\nconst drawParams = {\r\n  showGradient  : true,\r\n  showBars      : true,\r\n  showCircles   : true,\r\n  showLine      : true,\r\n  showNoise     : false,\r\n  showInvert    : false,\r\n  showEmboss    : false\r\n};\r\n\r\n//Visualization\r\nconst cbCircles = document.querySelector(\"#cb-circles\");\r\nconst cbBars = document.querySelector(\"#cb-bars\");\r\nconst cbGradient = document.querySelector(\"#cb-gradient\");\r\nconst cbNoise = document.querySelector(\"#cb-noise\");\r\nconst cbInvert = document.querySelector(\"#cb-invert-colors\");\r\nconst cbEmboss = document.querySelector(\"#cb-emboss\");\r\nconst cbLine = document.querySelector(\"#cb-line\");\r\n\r\nlet coinOne;\r\nlet coinTwo;\r\nlet coinImg;\r\nlet canvasWidth = _canvas_js__WEBPACK_IMPORTED_MODULE_2__.canvasWidth;\r\nlet canvasHeight = _canvas_js__WEBPACK_IMPORTED_MODULE_2__.canvasHeight;\r\nlet play;\r\n\r\n// 1 - here we are faking an enumeration\r\nconst DEFAULTS = Object.freeze({\r\n\tsound1  :  \"media/New Adventure Theme.mp3\"\r\n});\r\n\r\nconst init = () =>{\r\n  _audio_js__WEBPACK_IMPORTED_MODULE_1__.setupWebaudio(DEFAULTS.sound1); //defaults to first audio track\r\n\tlet canvasElement = document.querySelector(\"canvas\"); // hookup <canvas> element\r\n\tsetupUI(canvasElement);\r\n\r\n  //default true\r\n  cbCircles.checked = true;\r\n  cbBars.checked = true;\r\n  cbGradient.checked = true;\r\n  cbLine.checked = true;\r\n\r\n  const ctx = canvasElement.getContext(\"2d\");\r\n\r\n  coinOne = new _canvas_js__WEBPACK_IMPORTED_MODULE_2__.Coin(ctx,coinImg,canvasWidth/4,canvasHeight/2, 13);\r\n  coinTwo = new _canvas_js__WEBPACK_IMPORTED_MODULE_2__.Coin(ctx,coinImg,(canvasWidth/4) *3,canvasHeight/2, 13);\r\n\r\n  let spritesheetURL = \"./src/coin_spritesheet.png\";\r\n  //Setup canvas\r\n\r\n  _canvas_js__WEBPACK_IMPORTED_MODULE_2__.setupCanvas(canvasElement,_audio_js__WEBPACK_IMPORTED_MODULE_1__.analyserNode);\r\n  loop();\r\n  coinOne.preloadImage(spritesheetURL);\r\n  coinTwo.preloadImage(spritesheetURL);\r\n}\r\n\r\nconst setupUI = (canvasElement) =>{\r\n  // A - hookup fullscreen button\r\n  const fsButton = document.querySelector(\"#btn-fs\");\r\n\tconst playButton = document.querySelector(\"#btn-play\");\r\n  // add .onclick event to button\r\n  fsButton.onclick = e => {\r\n    console.log(\"goFullscreen() called\");\r\n    _utils_js__WEBPACK_IMPORTED_MODULE_0__.goFullscreen(canvasElement);\r\n  };\r\n\r\n  //add .onclick evenet to button\r\n  playButton.onclick = e => {\r\n    console.log(`audioCtx.state before = ${_audio_js__WEBPACK_IMPORTED_MODULE_1__.audioCtx.state}`);\r\n\r\n    //check if context is in suspended state(autoplay policy)\r\n    if (_audio_js__WEBPACK_IMPORTED_MODULE_1__.audioCtx.state == \"suspended\"){\r\n        _audio_js__WEBPACK_IMPORTED_MODULE_1__.audioCtx.resume();\r\n    }\r\n    console.log(`audioCtx.state after = ${_audio_js__WEBPACK_IMPORTED_MODULE_1__.audioCtx.state}`);\r\n    if(e.target.dataset.playing == \"no\"){\r\n        //if track is currently paused, play it\r\n        _audio_js__WEBPACK_IMPORTED_MODULE_1__.playCurrentSound();\r\n        e.target.dataset.playing = \"yes\"; //our CSS will set the text to \"Paused\"\r\n        //if track is playing, pause it\r\n        play = false;\r\n    }else{\r\n        _audio_js__WEBPACK_IMPORTED_MODULE_1__.pauseCurrentSound();\r\n        e.target.dataset.playing = \"no\"; //our css will set the text to \"Play\"\r\n        play = true;\r\n    }\r\n  };\r\n\r\n  //Sliders\r\n  // C - hookup volume slider & label\r\n  let volumeSlider = document.querySelector(\"#slider-volume\");\r\n  let volumeLabel = document.querySelector(\"#label-volume\");\r\n  //add .oninput event to slider\r\n  volumeSlider.oninput = e =>{\r\n    //set the gain\r\n    _audio_js__WEBPACK_IMPORTED_MODULE_1__.setVolume(e.target.value);\r\n    //update value of label to match value of sldier\r\n    volumeLabel.innerHTML = Math.round((e.target.value/2 * 100));\r\n  };\r\n  //set value of label to match initial value of slider\r\n  volumeSlider.dispatchEvent(new Event(\"input\"));\r\n\r\n  //D - hookup track <select>\r\n  let trackSelect = document.querySelector(\"#select-track\");\r\n  //add .onchange event to <select>\r\n  trackSelect.onchange = e =>{\r\n    _audio_js__WEBPACK_IMPORTED_MODULE_1__.loadSoundFile(e.target.value);\r\n    //pause the current track if it is playing\r\n    if (playButton.dataset.playing == \"yes\"){\r\n        playButton.dispatchEvent(new MouseEvent(\"click\"));\r\n    }\r\n  };\r\n\r\n  //Checkboxes\r\n  cbBars.onchange = e => {drawParams.showBars = _utils_js__WEBPACK_IMPORTED_MODULE_0__.toggleCheckbox(cbBars)};\r\n  cbCircles.onchange = e => {drawParams.showCircles = _utils_js__WEBPACK_IMPORTED_MODULE_0__.toggleCheckbox(cbCircles)};\r\n  cbGradient.onchange = e => {drawParams.showGradient = _utils_js__WEBPACK_IMPORTED_MODULE_0__.toggleCheckbox(cbGradient)};\r\n  cbNoise.onchange = e => {drawParams.showNoise = _utils_js__WEBPACK_IMPORTED_MODULE_0__.toggleCheckbox(cbNoise)};\r\n  cbInvert.onchange = e => {drawParams.showInvert = _utils_js__WEBPACK_IMPORTED_MODULE_0__.toggleCheckbox(cbInvert)};\r\n  cbEmboss.onchange = e => {drawParams.showEmboss = _utils_js__WEBPACK_IMPORTED_MODULE_0__.toggleCheckbox(cbEmboss)};\r\n  cbLine.onchange = e => {drawParams.showLine = _utils_js__WEBPACK_IMPORTED_MODULE_0__.toggleCheckbox(cbLine)};\r\n} // end setupUI\r\n\r\nconst loop = () =>{\r\n    /* NOTE: This is temporary testing code that we will delete in Part II */\r\n        setTimeout(loop, 1000/60);\r\n        _canvas_js__WEBPACK_IMPORTED_MODULE_2__.draw(drawParams);\r\n}\r\n\r\n\n\n//# sourceURL=webpack://myat-n-hw3-refactor/./src/main.js?");

/***/ }),

/***/ "./src/utils.js":
/*!**********************!*\
  !*** ./src/utils.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getLinearGradient: () => (/* binding */ getLinearGradient),\n/* harmony export */   getRandomColor: () => (/* binding */ getRandomColor),\n/* harmony export */   goFullscreen: () => (/* binding */ goFullscreen),\n/* harmony export */   makeColor: () => (/* binding */ makeColor),\n/* harmony export */   toggleCheckbox: () => (/* binding */ toggleCheckbox)\n/* harmony export */ });\nconst makeColor = (red, green, blue, alpha = 1) => {\r\n    return `rgba(${red},${green},${blue},${alpha})`;\r\n  };\r\n  \r\n  const getRandom = (min, max) => {\r\n    return Math.random() * (max - min) + min;\r\n  };\r\n  \r\n  const getRandomColor = () => {\r\n    const floor = 35; // so that colors are not too bright or too dark \r\n    const getByte = () => getRandom(floor,255-floor);\r\n    return `rgba(${getByte()},${getByte()},${getByte()},1)`;\r\n  };\r\n  \r\n  const getLinearGradient = (ctx,startX,startY,endX,endY,colorStops) => {\r\n    let lg = ctx.createLinearGradient(startX,startY,endX,endY);\r\n    for(let stop of colorStops){\r\n      lg.addColorStop(stop.percent,stop.color);\r\n    }\r\n    return lg;\r\n  };\r\n  \r\n  // https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\r\n  const goFullscreen = (element) => {\r\n    if (element.requestFullscreen) {\r\n      element.requestFullscreen();\r\n    } else if (element.mozRequestFullscreen) {\r\n      element.mozRequestFullscreen();\r\n    } else if (element.mozRequestFullScreen) { // camel-cased 'S' was changed to 's' in spec\r\n      element.mozRequestFullScreen();\r\n    } else if (element.webkitRequestFullscreen) {\r\n      element.webkitRequestFullscreen();\r\n    }\r\n    // .. and do nothing if the method is not supported\r\n  };\r\n\r\n  //checkboxes\r\n  const toggleCheckbox = (cb) =>{\r\n    if(!cb.checked){\r\n      return false;\r\n    }else{\r\n      return true;\r\n    }\r\n  }\r\n  \n\n//# sourceURL=webpack://myat-n-hw3-refactor/./src/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/loader.js");
/******/ 	
/******/ })()
;